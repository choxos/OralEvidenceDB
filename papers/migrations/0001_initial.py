# Generated by Django 4.2.16 on 2025-08-17 22:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=1000)),
                ("last_name", models.CharField(max_length=1000)),
                ("middle_initials", models.CharField(blank=True, max_length=500)),
                ("email", models.EmailField(blank=True, max_length=254)),
                (
                    "orcid",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="ORCID ID"
                    ),
                ),
                (
                    "affiliations",
                    models.TextField(
                        blank=True, help_text="Institutional affiliations"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="AuthorPaper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("author_order", models.PositiveIntegerField()),
                ("is_corresponding", models.BooleanField(default=False)),
                ("is_first_author", models.BooleanField(default=False)),
                ("is_last_author", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["paper", "author_order"],
            },
        ),
        migrations.CreateModel(
            name="Citation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "citation_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Citation Date",
                    ),
                ),
                (
                    "is_post_retraction",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        verbose_name="Post-Retraction Citation",
                    ),
                ),
                (
                    "citation_type",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Citation Type"
                    ),
                ),
                (
                    "mentions_retraction",
                    models.BooleanField(
                        default=False, verbose_name="Mentions Retraction"
                    ),
                ),
                (
                    "citation_sentiment",
                    models.CharField(
                        choices=[
                            ("positive", "Positive"),
                            ("neutral", "Neutral"),
                            ("negative", "Negative"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=20,
                        verbose_name="Citation Sentiment",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-citation_date"],
            },
        ),
        migrations.CreateModel(
            name="CitationAnalysisRun",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("started", "Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="started",
                        max_length=20,
                    ),
                ),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("full_update", "Full Citation Update"),
                            ("recent_only", "Recent Citations Only"),
                            ("retracted_only", "Retracted Papers Only"),
                        ],
                        default="recent_only",
                        max_length=50,
                    ),
                ),
                ("papers_analyzed", models.IntegerField(default=0)),
                ("citations_processed", models.IntegerField(default=0)),
                ("new_citations_found", models.IntegerField(default=0)),
                ("errors_encountered", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("error_details", models.JSONField(blank=True, default=list)),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="CitationData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_citations",
                    models.IntegerField(
                        db_index=True, default=0, verbose_name="Total Citations"
                    ),
                ),
                (
                    "pre_retraction_citations",
                    models.IntegerField(
                        default=0, verbose_name="Pre-Retraction Citations"
                    ),
                ),
                (
                    "post_retraction_citations",
                    models.IntegerField(
                        db_index=True,
                        default=0,
                        verbose_name="Post-Retraction Citations",
                    ),
                ),
                (
                    "first_citation_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="First Citation"
                    ),
                ),
                (
                    "last_citation_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Last Citation"
                    ),
                ),
                (
                    "last_pre_retraction_citation",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Last Pre-Retraction Citation",
                    ),
                ),
                (
                    "first_post_retraction_citation",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="First Post-Retraction Citation",
                    ),
                ),
                (
                    "problematic_score",
                    models.FloatField(
                        db_index=True,
                        default=0.0,
                        help_text="Score based on post-retraction citations and citation velocity",
                        verbose_name="Problematic Score",
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(auto_now=True, verbose_name="Last Updated"),
                ),
                (
                    "data_completeness_score",
                    models.FloatField(default=0.0, verbose_name="Data Completeness"),
                ),
                (
                    "has_recent_citations",
                    models.BooleanField(
                        default=False, verbose_name="Has Recent Citations"
                    ),
                ),
                (
                    "needs_manual_review",
                    models.BooleanField(
                        default=False, verbose_name="Needs Manual Review"
                    ),
                ),
            ],
            options={
                "ordering": ["-problematic_score", "-post_retraction_citations"],
            },
        ),
        migrations.CreateModel(
            name="CitingWork",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "openalex_id",
                    models.CharField(
                        db_index=True,
                        max_length=500,
                        unique=True,
                        verbose_name="OpenAlex ID",
                    ),
                ),
                ("title", models.TextField(verbose_name="Citing Work Title")),
                (
                    "doi",
                    models.CharField(blank=True, max_length=500, verbose_name="DOI"),
                ),
                (
                    "pmid",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="PubMed ID"
                    ),
                ),
                (
                    "publication_year",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Publication Year",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Publication Date"
                    ),
                ),
                (
                    "journal_name",
                    models.CharField(
                        blank=True, max_length=1000, verbose_name="Journal Name"
                    ),
                ),
                ("authors", models.TextField(blank=True, verbose_name="Authors")),
                (
                    "citation_context",
                    models.TextField(blank=True, verbose_name="Citation Context"),
                ),
                (
                    "is_oral_health_related",
                    models.BooleanField(
                        default=False, verbose_name="Oral Health Related"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-publication_year", "title"],
            },
        ),
        migrations.CreateModel(
            name="ClinicalTrial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nct_id",
                    models.CharField(
                        db_index=True,
                        max_length=50,
                        unique=True,
                        verbose_name="NCT Number",
                    ),
                ),
                (
                    "org_study_id",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Organization Study ID"
                    ),
                ),
                ("brief_title", models.TextField(verbose_name="Brief Title")),
                (
                    "official_title",
                    models.TextField(blank=True, verbose_name="Official Title"),
                ),
                (
                    "brief_summary",
                    models.TextField(blank=True, verbose_name="Brief Summary"),
                ),
                (
                    "detailed_description",
                    models.TextField(blank=True, verbose_name="Detailed Description"),
                ),
                (
                    "study_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("interventional", "Interventional"),
                            ("observational", "Observational"),
                            ("expanded_access", "Expanded Access"),
                            ("other", "Other"),
                        ],
                        max_length=100,
                        verbose_name="Study Type",
                    ),
                ),
                (
                    "study_phase",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("early_phase_1", "Early Phase 1"),
                            ("phase_1", "Phase 1"),
                            ("phase_1_phase_2", "Phase 1/Phase 2"),
                            ("phase_2", "Phase 2"),
                            ("phase_2_phase_3", "Phase 2/Phase 3"),
                            ("phase_3", "Phase 3"),
                            ("phase_4", "Phase 4"),
                            ("not_applicable", "Not Applicable"),
                        ],
                        max_length=50,
                        verbose_name="Study Phase",
                    ),
                ),
                (
                    "primary_purpose",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Primary Purpose"
                    ),
                ),
                (
                    "intervention_type",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Intervention Type"
                    ),
                ),
                (
                    "intervention_name",
                    models.TextField(blank=True, verbose_name="Intervention Name"),
                ),
                (
                    "condition",
                    models.TextField(blank=True, verbose_name="Condition/Disease"),
                ),
                (
                    "oral_health_category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("dental_caries", "Dental Caries"),
                            ("periodontal_disease", "Periodontal Disease"),
                            ("oral_cancer", "Oral Cancer"),
                            ("orthodontics", "Orthodontics"),
                            ("endodontics", "Endodontics"),
                            ("prosthodontics", "Prosthodontics"),
                            ("oral_surgery", "Oral Surgery"),
                            ("oral_medicine", "Oral Medicine"),
                            ("oral_pathology", "Oral Pathology"),
                            ("preventive_dentistry", "Preventive Dentistry"),
                            ("pediatric_dentistry", "Pediatric Dentistry"),
                            ("geriatric_dentistry", "Geriatric Dentistry"),
                            ("special_needs_dentistry", "Special Needs Dentistry"),
                            ("oral_hygiene", "Oral Hygiene"),
                            ("other", "Other"),
                        ],
                        db_index=True,
                        max_length=100,
                        verbose_name="Oral Health Category",
                    ),
                ),
                (
                    "overall_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_yet_recruiting", "Not yet recruiting"),
                            ("recruiting", "Recruiting"),
                            ("enrolling_by_invitation", "Enrolling by invitation"),
                            ("active_not_recruiting", "Active, not recruiting"),
                            ("suspended", "Suspended"),
                            ("terminated", "Terminated"),
                            ("completed", "Completed"),
                            ("withdrawn", "Withdrawn"),
                            ("unknown", "Unknown status"),
                        ],
                        db_index=True,
                        max_length=50,
                        verbose_name="Overall Status",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Study Start Date"
                    ),
                ),
                (
                    "completion_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Study Completion Date"
                    ),
                ),
                (
                    "primary_completion_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Primary Completion Date"
                    ),
                ),
                (
                    "enrollment",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Target Enrollment"
                    ),
                ),
                (
                    "enrollment_type",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Enrollment Type"
                    ),
                ),
                (
                    "minimum_age",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Minimum Age"
                    ),
                ),
                (
                    "maximum_age",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Maximum Age"
                    ),
                ),
                (
                    "gender",
                    models.CharField(blank=True, max_length=50, verbose_name="Gender"),
                ),
                (
                    "eligibility_criteria",
                    models.TextField(blank=True, verbose_name="Eligibility Criteria"),
                ),
                (
                    "locations",
                    models.TextField(blank=True, verbose_name="Study Locations"),
                ),
                (
                    "sponsor",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Lead Sponsor"
                    ),
                ),
                (
                    "collaborators",
                    models.TextField(blank=True, verbose_name="Collaborators"),
                ),
                (
                    "primary_outcomes",
                    models.TextField(blank=True, verbose_name="Primary Outcomes"),
                ),
                (
                    "secondary_outcomes",
                    models.TextField(blank=True, verbose_name="Secondary Outcomes"),
                ),
                (
                    "clinical_trials_url",
                    models.URLField(
                        blank=True,
                        max_length=500,
                        verbose_name="ClinicalTrials.gov URL",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_verified",
                    models.DateField(
                        blank=True, null=True, verbose_name="Last Verified"
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date", "nct_id"],
            },
        ),
        migrations.CreateModel(
            name="DataImportLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "query",
                    models.TextField(
                        default="(Stomatognathic Diseases[MeSH Major Topic]) OR (Dentistry[MeSH Major Topic]) OR (Oral Health[MeSH Major Topic])",
                        help_text="PubMed search query used",
                    ),
                ),
                ("total_papers_found", models.IntegerField(blank=True, null=True)),
                ("papers_imported", models.IntegerField(default=0)),
                ("papers_updated", models.IntegerField(default=0)),
                ("papers_failed", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("started", "Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="started",
                        max_length=200,
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="DataRepository",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        max_length=500,
                        unique=True,
                        verbose_name="Repository Name",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(max_length=500, verbose_name="Display Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("base_url", models.URLField(max_length=1000, verbose_name="Base URL")),
                (
                    "repository_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("institutional", "Institutional Repository"),
                            ("discipline_specific", "Discipline-Specific Repository"),
                            ("general_purpose", "General Purpose Repository"),
                            ("government", "Government Repository"),
                            ("publisher", "Publisher Repository"),
                            ("project_specific", "Project-Specific Repository"),
                        ],
                        max_length=100,
                        verbose_name="Repository Type",
                    ),
                ),
                (
                    "primary_focus",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Primary Focus"
                    ),
                ),
                (
                    "supports_oral_health",
                    models.BooleanField(
                        default=True, verbose_name="Supports Oral Health Research"
                    ),
                ),
                (
                    "api_endpoint",
                    models.URLField(
                        blank=True, max_length=1000, verbose_name="API Endpoint"
                    ),
                ),
                (
                    "supports_api",
                    models.BooleanField(
                        default=False, verbose_name="Supports API Access"
                    ),
                ),
                (
                    "metadata_standard",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Metadata Standard"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True, default=True, verbose_name="Is Active"
                    ),
                ),
                (
                    "requires_registration",
                    models.BooleanField(
                        default=False, verbose_name="Requires Registration"
                    ),
                ),
                (
                    "has_doi_assignment",
                    models.BooleanField(default=False, verbose_name="Assigns DOIs"),
                ),
                (
                    "peer_reviewed",
                    models.BooleanField(default=False, verbose_name="Peer Reviewed"),
                ),
                (
                    "total_datasets",
                    models.IntegerField(default=0, verbose_name="Total Datasets"),
                ),
                (
                    "oral_health_datasets",
                    models.IntegerField(default=0, verbose_name="Oral Health Datasets"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_checked",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Checked"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Data Repositories",
                "ordering": ["display_name"],
            },
        ),
        migrations.CreateModel(
            name="DataSearchRun",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("started", "Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="started",
                        max_length=20,
                    ),
                ),
                (
                    "repositories_searched",
                    models.JSONField(
                        default=list, verbose_name="Repositories Searched"
                    ),
                ),
                (
                    "search_terms",
                    models.TextField(blank=True, verbose_name="Search Terms"),
                ),
                (
                    "date_range_start",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date Range Start"
                    ),
                ),
                (
                    "date_range_end",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date Range End"
                    ),
                ),
                ("datasets_found", models.IntegerField(default=0)),
                ("datasets_processed", models.IntegerField(default=0)),
                ("new_datasets_added", models.IntegerField(default=0)),
                ("existing_datasets_updated", models.IntegerField(default=0)),
                ("paper_links_created", models.IntegerField(default=0)),
                ("errors_encountered", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="DatasetAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=500, verbose_name="First Name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=500, verbose_name="Last Name"),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Middle Name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="Email"),
                ),
                (
                    "orcid",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=200,
                        verbose_name="ORCID ID",
                    ),
                ),
                (
                    "affiliation",
                    models.TextField(blank=True, verbose_name="Affiliation"),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Department"
                    ),
                ),
                (
                    "institution",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Institution"
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Country"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="DatasetAuthorshipOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "author_order",
                    models.PositiveIntegerField(verbose_name="Author Order"),
                ),
                (
                    "is_corresponding",
                    models.BooleanField(
                        default=False, verbose_name="Corresponding Author"
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(default=False, verbose_name="Primary Author"),
                ),
                (
                    "role",
                    models.CharField(blank=True, max_length=200, verbose_name="Role"),
                ),
            ],
            options={
                "ordering": ["dataset", "author_order"],
            },
        ),
        migrations.CreateModel(
            name="DatasetPaperLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_type",
                    models.CharField(
                        choices=[
                            ("primary_data", "Primary Data Source"),
                            ("supplementary_data", "Supplementary Data"),
                            ("reanalysis_data", "Data for Reanalysis"),
                            ("validation_data", "Validation Dataset"),
                            ("code_software", "Code/Software"),
                            ("protocol", "Study Protocol"),
                            ("other", "Other"),
                        ],
                        db_index=True,
                        default="supplementary_data",
                        max_length=50,
                        verbose_name="Link Type",
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        help_text="Confidence in the paper-dataset link (0.0-1.0)",
                        null=True,
                        verbose_name="Confidence Score",
                    ),
                ),
                (
                    "extraction_method",
                    models.CharField(
                        choices=[
                            ("automatic_doi", "Automatic DOI Detection"),
                            ("automatic_url", "Automatic URL Detection"),
                            ("manual_review", "Manual Review"),
                            ("author_declaration", "Author Declaration"),
                            ("repository_search", "Repository Search"),
                            ("other", "Other"),
                        ],
                        default="automatic_doi",
                        max_length=50,
                        verbose_name="Extraction Method",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, verbose_name="Manually Verified"
                    ),
                ),
                (
                    "verified_by",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Verified By"
                    ),
                ),
                (
                    "verification_notes",
                    models.TextField(blank=True, verbose_name="Verification Notes"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Journal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Journal abbreviation (displayed on website)",
                        max_length=2000,
                        unique=True,
                        verbose_name="Journal Abbreviation",
                    ),
                ),
                (
                    "abbreviation",
                    models.CharField(
                        blank=True,
                        help_text="Full journal name (for reference)",
                        max_length=1000,
                        verbose_name="Full Journal Name",
                    ),
                ),
                (
                    "issn_print",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Print ISSN"
                    ),
                ),
                (
                    "issn_electronic",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Electronic ISSN"
                    ),
                ),
                ("impact_factor", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LLMProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=500, unique=True)),
                ("display_name", models.CharField(max_length=1000)),
                (
                    "model_name",
                    models.CharField(
                        help_text="Specific model used (e.g., gpt-4, claude-3)",
                        max_length=1000,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "api_cost_per_1k_tokens",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=8, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["display_name"],
            },
        ),
        migrations.CreateModel(
            name="MeshTerm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "descriptor_ui",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Descriptor UI"
                    ),
                ),
                (
                    "descriptor_name",
                    models.CharField(max_length=2000, verbose_name="Descriptor Name"),
                ),
                ("is_major_topic", models.BooleanField(default=False)),
                (
                    "tree_numbers",
                    models.TextField(blank=True, help_text="MeSH tree numbers"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["descriptor_name"],
            },
        ),
        migrations.CreateModel(
            name="NCTExtractionRun",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("started", "Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="started",
                        max_length=20,
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("pubmed_abstracts", "PubMed Abstracts"),
                            ("full_text_pmc", "Full Text PMC"),
                            ("manual_input", "Manual Input"),
                        ],
                        default="pubmed_abstracts",
                        max_length=50,
                        verbose_name="Source Type",
                    ),
                ),
                ("papers_processed", models.IntegerField(default=0)),
                ("nct_ids_extracted", models.IntegerField(default=0)),
                ("new_trials_added", models.IntegerField(default=0)),
                ("existing_trials_updated", models.IntegerField(default=0)),
                ("paper_trial_links_created", models.IntegerField(default=0)),
                ("papers_failed", models.IntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="OpenAlexWork",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "openalex_id",
                    models.CharField(
                        db_index=True,
                        max_length=500,
                        unique=True,
                        verbose_name="OpenAlex ID",
                    ),
                ),
                ("title", models.TextField(verbose_name="Work Title")),
                (
                    "doi",
                    models.CharField(
                        blank=True, db_index=True, max_length=500, verbose_name="DOI"
                    ),
                ),
                (
                    "pmid",
                    models.BigIntegerField(
                        blank=True, db_index=True, null=True, verbose_name="PubMed ID"
                    ),
                ),
                (
                    "publication_year",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Publication Year",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Publication Date"
                    ),
                ),
                (
                    "journal_name",
                    models.CharField(
                        blank=True, max_length=1000, verbose_name="Journal Name"
                    ),
                ),
                (
                    "cited_by_count",
                    models.IntegerField(
                        db_index=True, default=0, verbose_name="Total Citations"
                    ),
                ),
                (
                    "is_retracted",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="Is Retracted"
                    ),
                ),
                (
                    "work_type",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Work Type"
                    ),
                ),
                (
                    "is_oral_health_related",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="Oral Health Related"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_citation_check", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-cited_by_count", "-publication_year"],
            },
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "pmid",
                    models.BigIntegerField(
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="PubMed ID",
                    ),
                ),
                (
                    "pmc",
                    models.CharField(blank=True, max_length=200, verbose_name="PMC ID"),
                ),
                (
                    "doi",
                    models.CharField(blank=True, max_length=2000, verbose_name="DOI"),
                ),
                ("title", models.TextField()),
                ("abstract", models.TextField(blank=True)),
                ("language", models.CharField(default="eng", max_length=100)),
                ("volume", models.CharField(blank=True, max_length=200)),
                ("issue", models.CharField(blank=True, max_length=200)),
                ("pages", models.CharField(blank=True, max_length=500)),
                ("publication_date", models.DateField(blank=True, null=True)),
                ("publication_year", models.IntegerField(blank=True, null=True)),
                (
                    "epub_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Electronic Publication Date",
                    ),
                ),
                ("received_date", models.DateField(blank=True, null=True)),
                ("accepted_date", models.DateField(blank=True, null=True)),
                (
                    "publication_types",
                    models.TextField(
                        blank=True, help_text="Comma-separated publication types"
                    ),
                ),
                ("publication_status", models.CharField(blank=True, max_length=500)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_indexed", models.DateTimeField(blank=True, null=True)),
                (
                    "is_processed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether PICO extraction has been performed",
                    ),
                ),
                ("processing_error", models.TextField(blank=True)),
                (
                    "study_type_classifications",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Study type classifications with confidence scores",
                    ),
                ),
            ],
            options={
                "ordering": ["-publication_date", "-pmid"],
            },
        ),
        migrations.CreateModel(
            name="PaperClinicalTrial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("results_paper", "Results Paper"),
                            ("protocol_paper", "Protocol Paper"),
                            ("secondary_analysis", "Secondary Analysis"),
                            ("sub_study", "Sub-study"),
                            ("meta_analysis", "Includes in Meta-analysis"),
                            ("review", "Reviews/Mentions Trial"),
                            ("other", "Other"),
                        ],
                        db_index=True,
                        default="results_paper",
                        max_length=50,
                        verbose_name="Relationship Type",
                    ),
                ),
                (
                    "extraction_method",
                    models.CharField(
                        choices=[
                            ("automatic_nct", "Automatic NCT ID Detection"),
                            ("manual_review", "Manual Review"),
                            ("author_declaration", "Author Declaration"),
                            ("registry_search", "Registry Search"),
                            ("other", "Other"),
                        ],
                        default="automatic_nct",
                        max_length=50,
                        verbose_name="Extraction Method",
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        help_text="Confidence in the paper-trial link (0.0-1.0)",
                        null=True,
                        verbose_name="Confidence Score",
                    ),
                ),
                (
                    "reports_primary_outcome",
                    models.BooleanField(
                        default=False, verbose_name="Reports Primary Outcome"
                    ),
                ),
                (
                    "reports_secondary_outcomes",
                    models.BooleanField(
                        default=False, verbose_name="Reports Secondary Outcomes"
                    ),
                ),
                (
                    "follow_up_duration",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Follow-up Duration"
                    ),
                ),
                (
                    "is_preregistered",
                    models.BooleanField(
                        default=False, verbose_name="Was Pre-registered"
                    ),
                ),
                (
                    "registration_timing",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("prospective", "Prospective"),
                            ("retrospective", "Retrospective"),
                            ("unknown", "Unknown"),
                        ],
                        max_length=50,
                        verbose_name="Registration Timing",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "verified_by",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Verified By"
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, verbose_name="Additional Notes"),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PICOExtraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "population",
                    models.TextField(
                        blank=True,
                        help_text="Patient population or participants (e.g., adults with periodontal disease, children with caries)",
                    ),
                ),
                (
                    "intervention",
                    models.TextField(
                        blank=True,
                        help_text="Intervention or exposure (e.g., fluoride treatment, periodontal therapy, oral hygiene instructions)",
                    ),
                ),
                (
                    "comparison",
                    models.TextField(
                        blank=True,
                        help_text="Comparison or control group (e.g., placebo, standard care, no treatment)",
                    ),
                ),
                (
                    "outcome",
                    models.TextField(
                        blank=True,
                        help_text="Outcome measures (e.g., caries reduction, periodontal healing, oral health-related quality of life)",
                    ),
                ),
                (
                    "results",
                    models.TextField(
                        blank=True,
                        help_text="Numerical results, statistical findings, or quantitative answers",
                    ),
                ),
                (
                    "setting",
                    models.TextField(
                        blank=True,
                        help_text="Setting where the study was conducted (e.g., dental clinic, hospital, community health center)",
                    ),
                ),
                (
                    "study_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "randomized_controlled_trial",
                                "Randomized Controlled Trial (RCT)",
                            ),
                            ("systematic_review", "Systematic Review"),
                            ("meta_analysis", "Meta-Analysis"),
                            ("cohort_study", "Cohort Study"),
                            ("case_control_study", "Case-Control Study"),
                            ("cross_sectional_study", "Cross-Sectional Study"),
                            ("case_series", "Case Series"),
                            ("case_report", "Case Report"),
                            ("clinical_trial", "Clinical Trial"),
                            ("pilot_study", "Pilot Study"),
                            ("observational_study", "Observational Study"),
                            ("retrospective_study", "Retrospective Study"),
                            ("prospective_study", "Prospective Study"),
                            ("longitudinal_study", "Longitudinal Study"),
                            ("experimental_study", "Experimental Study"),
                            ("quasi_experimental", "Quasi-Experimental Study"),
                            ("descriptive_study", "Descriptive Study"),
                            ("analytical_study", "Analytical Study"),
                            ("ecological_study", "Ecological Study"),
                            ("narrative_review", "Narrative Review"),
                            ("scoping_review", "Scoping Review"),
                            ("umbrella_review", "Umbrella Review"),
                            ("laboratory_study", "Laboratory Study"),
                            ("animal_study", "Animal Study"),
                            ("in_vitro_study", "In Vitro Study"),
                            ("survey", "Survey"),
                            ("interview_study", "Interview Study"),
                            ("qualitative_study", "Qualitative Study"),
                            ("mixed_methods", "Mixed Methods Study"),
                            ("diagnostic_study", "Diagnostic Study"),
                            ("prognostic_study", "Prognostic Study"),
                            (
                                "health_technology_assessment",
                                "Health Technology Assessment",
                            ),
                            ("cost_effectiveness_study", "Cost-Effectiveness Study"),
                            ("guidelines", "Clinical Practice Guidelines"),
                            ("consensus_statement", "Consensus Statement"),
                            ("expert_opinion", "Expert Opinion"),
                            ("other", "Other"),
                            ("not_specified", "Not Specified"),
                        ],
                        help_text="Type of study design",
                        max_length=50,
                    ),
                ),
                (
                    "timeframe",
                    models.TextField(
                        blank=True,
                        help_text="Study timeframe, duration, or follow-up period",
                    ),
                ),
                ("study_design", models.CharField(blank=True, max_length=2000)),
                ("sample_size", models.CharField(blank=True, max_length=1000)),
                ("study_duration", models.CharField(blank=True, max_length=1000)),
                (
                    "extraction_confidence",
                    models.FloatField(
                        blank=True, help_text="Confidence score 0-1", null=True
                    ),
                ),
                ("extraction_prompt", models.TextField(blank=True)),
                ("raw_llm_response", models.TextField(blank=True)),
                ("is_manually_verified", models.BooleanField(default=False)),
                ("verification_notes", models.TextField(blank=True)),
                ("extracted_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-extracted_at"],
            },
        ),
        migrations.CreateModel(
            name="RetractionImportLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("started", "Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="started",
                        max_length=20,
                    ),
                ),
                ("total_records_processed", models.IntegerField(default=0)),
                ("records_imported", models.IntegerField(default=0)),
                ("records_updated", models.IntegerField(default=0)),
                ("records_skipped", models.IntegerField(default=0)),
                (
                    "source_file",
                    models.CharField(
                        blank=True, help_text="Path to source CSV file", max_length=500
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("institution", models.CharField(blank=True, max_length=2000)),
                (
                    "research_interests",
                    models.TextField(
                        blank=True, help_text="Research interests in oral health"
                    ),
                ),
                (
                    "orcid",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="ORCID ID"
                    ),
                ),
                (
                    "preferred_theme",
                    models.CharField(
                        choices=[("light", "Light"), ("dark", "Dark")],
                        default="light",
                        max_length=100,
                    ),
                ),
                ("saved_searches", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "bookmarked_papers",
                    models.ManyToManyField(
                        blank=True, related_name="bookmarked_by", to="papers.paper"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SharedDataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dataset_id",
                    models.CharField(
                        db_index=True, max_length=500, verbose_name="Dataset ID"
                    ),
                ),
                ("title", models.TextField(verbose_name="Dataset Title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("abstract", models.TextField(blank=True, verbose_name="Abstract")),
                (
                    "doi",
                    models.CharField(
                        blank=True, db_index=True, max_length=500, verbose_name="DOI"
                    ),
                ),
                ("url", models.URLField(max_length=1000, verbose_name="Dataset URL")),
                (
                    "version",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Version"
                    ),
                ),
                (
                    "oral_health_category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("dental_caries", "Dental Caries"),
                            ("periodontal_disease", "Periodontal Disease"),
                            ("oral_cancer", "Oral Cancer"),
                            ("orthodontics", "Orthodontics"),
                            ("endodontics", "Endodontics"),
                            ("prosthodontics", "Prosthodontics"),
                            ("oral_surgery", "Oral Surgery"),
                            ("oral_medicine", "Oral Medicine"),
                            ("oral_pathology", "Oral Pathology"),
                            ("preventive_dentistry", "Preventive Dentistry"),
                            ("pediatric_dentistry", "Pediatric Dentistry"),
                            ("epidemiology", "Oral Health Epidemiology"),
                            ("public_health", "Oral Public Health"),
                            ("clinical_trials", "Clinical Trial Data"),
                            ("genomics", "Oral Health Genomics"),
                            ("microbiome", "Oral Microbiome"),
                            ("imaging", "Oral/Dental Imaging"),
                            ("other", "Other"),
                        ],
                        db_index=True,
                        max_length=100,
                        verbose_name="Oral Health Category",
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("clinical", "Clinical Data"),
                            ("epidemiological", "Epidemiological Data"),
                            ("laboratory", "Laboratory Data"),
                            ("imaging", "Imaging Data"),
                            ("genomic", "Genomic Data"),
                            ("survey", "Survey Data"),
                            ("administrative", "Administrative Data"),
                            ("mixed", "Mixed Data Types"),
                            ("other", "Other"),
                        ],
                        max_length=100,
                        verbose_name="Data Type",
                    ),
                ),
                (
                    "file_format",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="File Format"
                    ),
                ),
                (
                    "file_count",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Number of Files"
                    ),
                ),
                (
                    "storage_size",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Storage Size"
                    ),
                ),
                (
                    "access_status",
                    models.CharField(
                        choices=[
                            ("open", "Open Access"),
                            ("restricted", "Restricted Access"),
                            ("embargo", "Embargo Period"),
                            ("closed", "Closed Access"),
                            ("unknown", "Unknown"),
                        ],
                        db_index=True,
                        default="unknown",
                        max_length=50,
                        verbose_name="Access Status",
                    ),
                ),
                (
                    "license",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="License"
                    ),
                ),
                (
                    "usage_terms",
                    models.TextField(blank=True, verbose_name="Usage Terms"),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Publication Date"
                    ),
                ),
                (
                    "last_modified",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Modified"
                    ),
                ),
                (
                    "embargo_end_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Embargo End Date"
                    ),
                ),
                (
                    "has_metadata",
                    models.BooleanField(default=False, verbose_name="Has Metadata"),
                ),
                (
                    "metadata_quality_score",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Metadata Quality Score"
                    ),
                ),
                (
                    "peer_reviewed",
                    models.BooleanField(default=False, verbose_name="Peer Reviewed"),
                ),
                (
                    "download_count",
                    models.IntegerField(default=0, verbose_name="Download Count"),
                ),
                (
                    "view_count",
                    models.IntegerField(default=0, verbose_name="View Count"),
                ),
                (
                    "citation_count",
                    models.IntegerField(default=0, verbose_name="Citation Count"),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("dataset", "Dataset"),
                            ("code", "Code/Software"),
                            ("documentation", "Documentation"),
                            ("protocol", "Study Protocol"),
                            ("questionnaire", "Questionnaire"),
                            ("other", "Other"),
                        ],
                        default="dataset",
                        max_length=100,
                        verbose_name="Resource Type",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "authors",
                    models.ManyToManyField(
                        related_name="datasets",
                        through="papers.DatasetAuthorshipOrder",
                        to="papers.datasetauthor",
                    ),
                ),
                (
                    "repository",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="datasets",
                        to="papers.datarepository",
                    ),
                ),
            ],
            options={
                "ordering": ["-publication_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RetractedPaper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "record_id",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        unique=True,
                        verbose_name="Retraction Watch Record ID",
                    ),
                ),
                (
                    "original_title",
                    models.TextField(blank=True, verbose_name="Original Paper Title"),
                ),
                (
                    "original_pubmed_id",
                    models.BigIntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Original PubMed ID",
                    ),
                ),
                (
                    "original_doi",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Original DOI"
                    ),
                ),
                (
                    "original_paper_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Original Publication Date"
                    ),
                ),
                (
                    "retraction_title",
                    models.TextField(
                        blank=True, verbose_name="Retraction Notice Title"
                    ),
                ),
                (
                    "retraction_doi",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Retraction DOI"
                    ),
                ),
                (
                    "retraction_pubmed_id",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="Retraction PubMed ID"
                    ),
                ),
                (
                    "retraction_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Retraction Date",
                    ),
                ),
                (
                    "journal",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=1000,
                        verbose_name="Journal Name",
                    ),
                ),
                ("authors", models.TextField(blank=True, verbose_name="Authors")),
                (
                    "country",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Country"
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="Subject Area"
                    ),
                ),
                (
                    "retraction_nature",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=500,
                        verbose_name="Nature of Retraction",
                    ),
                ),
                (
                    "reason",
                    models.TextField(blank=True, verbose_name="Retraction Reasons"),
                ),
                (
                    "notes",
                    models.TextField(blank=True, verbose_name="Additional Notes"),
                ),
                (
                    "article_type",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Article Type"
                    ),
                ),
                (
                    "original_paper_url",
                    models.URLField(
                        blank=True, max_length=2000, verbose_name="Original Paper URL"
                    ),
                ),
                (
                    "retraction_url",
                    models.URLField(
                        blank=True,
                        max_length=2000,
                        verbose_name="Retraction Notice URL",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-retraction_date", "-original_paper_date"],
                "indexes": [
                    models.Index(
                        fields=["original_pubmed_id"],
                        name="papers_retr_origina_36e241_idx",
                    ),
                    models.Index(
                        fields=["retraction_date"],
                        name="papers_retr_retract_1c4c74_idx",
                    ),
                    models.Index(
                        fields=["journal"], name="papers_retr_journal_d0e9e1_idx"
                    ),
                    models.Index(
                        fields=["retraction_nature"],
                        name="papers_retr_retract_698fe8_idx",
                    ),
                    models.Index(
                        fields=["country"], name="papers_retr_country_273b44_idx"
                    ),
                    models.Index(
                        fields=["subject"], name="papers_retr_subject_9909f7_idx"
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="retractedpaper",
            constraint=models.UniqueConstraint(
                condition=models.Q(("original_pubmed_id__isnull", False)),
                fields=("original_pubmed_id",),
                name="unique_retracted_paper_pmid",
            ),
        ),
        migrations.AddField(
            model_name="picoextraction",
            name="llm_provider",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="papers.llmprovider",
            ),
        ),
        migrations.AddField(
            model_name="picoextraction",
            name="paper",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="pico_extractions",
                to="papers.paper",
            ),
        ),
        migrations.AddField(
            model_name="paperclinicaltrial",
            name="clinical_trial",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="papers",
                to="papers.clinicaltrial",
            ),
        ),
        migrations.AddField(
            model_name="paperclinicaltrial",
            name="paper",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clinical_trials",
                to="papers.paper",
            ),
        ),
        migrations.AddField(
            model_name="paper",
            name="authors",
            field=models.ManyToManyField(
                related_name="papers", through="papers.AuthorPaper", to="papers.author"
            ),
        ),
        migrations.AddField(
            model_name="paper",
            name="journal",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="papers",
                to="papers.journal",
            ),
        ),
        migrations.AddField(
            model_name="paper",
            name="mesh_terms",
            field=models.ManyToManyField(
                blank=True, related_name="papers", to="papers.meshterm"
            ),
        ),
        migrations.AddIndex(
            model_name="openalexwork",
            index=models.Index(
                fields=["openalex_id"], name="papers_open_openale_1585ab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="openalexwork",
            index=models.Index(fields=["pmid"], name="papers_open_pmid_65097b_idx"),
        ),
        migrations.AddIndex(
            model_name="openalexwork",
            index=models.Index(fields=["doi"], name="papers_open_doi_36384f_idx"),
        ),
        migrations.AddIndex(
            model_name="openalexwork",
            index=models.Index(
                fields=["cited_by_count"], name="papers_open_cited_b_a2d327_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="openalexwork",
            index=models.Index(
                fields=["is_retracted"], name="papers_open_is_retr_fc45c2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="openalexwork",
            index=models.Index(
                fields=["publication_year"], name="papers_open_publica_e26ff2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="openalexwork",
            index=models.Index(
                fields=["is_oral_health_related"], name="papers_open_is_oral_dd1fec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nctextractionrun",
            index=models.Index(
                fields=["started_at"], name="papers_ncte_started_1da95d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="nctextractionrun",
            index=models.Index(fields=["status"], name="papers_ncte_status_96f4d0_idx"),
        ),
        migrations.AddIndex(
            model_name="nctextractionrun",
            index=models.Index(
                fields=["source_type"], name="papers_ncte_source__d46c77_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="meshterm",
            index=models.Index(
                fields=["descriptor_ui"], name="papers_mesh_descrip_c676bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="meshterm",
            index=models.Index(
                fields=["descriptor_name"], name="papers_mesh_descrip_944d50_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="meshterm",
            index=models.Index(
                fields=["is_major_topic"], name="papers_mesh_is_majo_0914d0_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="meshterm",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("descriptor_ui__isnull", False),
                    models.Q(("descriptor_ui", ""), _negated=True),
                ),
                fields=("descriptor_ui",),
                name="unique_descriptor_ui_when_present",
            ),
        ),
        migrations.AddIndex(
            model_name="journal",
            index=models.Index(fields=["name"], name="papers_jour_name_ff9fcb_idx"),
        ),
        migrations.AddIndex(
            model_name="journal",
            index=models.Index(
                fields=["abbreviation"], name="papers_jour_abbrevi_164e7d_idx"
            ),
        ),
        migrations.AddField(
            model_name="datasetpaperlink",
            name="dataset",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="paper_links",
                to="papers.shareddataset",
            ),
        ),
        migrations.AddField(
            model_name="datasetpaperlink",
            name="paper",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dataset_links",
                to="papers.paper",
            ),
        ),
        migrations.AddField(
            model_name="datasetauthorshiporder",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="papers.datasetauthor"
            ),
        ),
        migrations.AddField(
            model_name="datasetauthorshiporder",
            name="dataset",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="papers.shareddataset"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetauthor",
            index=models.Index(
                fields=["last_name", "first_name"],
                name="papers_data_last_na_0f9303_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="datasetauthor",
            index=models.Index(fields=["orcid"], name="papers_data_orcid_75d88c_idx"),
        ),
        migrations.AddIndex(
            model_name="datasetauthor",
            index=models.Index(
                fields=["institution"], name="papers_data_institu_a90284_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="datasetauthor",
            unique_together={("first_name", "last_name", "orcid")},
        ),
        migrations.AddIndex(
            model_name="datasearchrun",
            index=models.Index(
                fields=["started_at"], name="papers_data_started_6dca2b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasearchrun",
            index=models.Index(fields=["status"], name="papers_data_status_60d2f1_idx"),
        ),
        migrations.AddIndex(
            model_name="datarepository",
            index=models.Index(fields=["name"], name="papers_data_name_af77d1_idx"),
        ),
        migrations.AddIndex(
            model_name="datarepository",
            index=models.Index(
                fields=["repository_type"], name="papers_data_reposit_972419_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datarepository",
            index=models.Index(
                fields=["is_active"], name="papers_data_is_acti_0045d7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datarepository",
            index=models.Index(
                fields=["supports_oral_health"], name="papers_data_support_038b56_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dataimportlog",
            index=models.Index(fields=["status"], name="papers_data_status_c1a659_idx"),
        ),
        migrations.AddIndex(
            model_name="dataimportlog",
            index=models.Index(
                fields=["started_at"], name="papers_data_started_f27154_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="clinicaltrial",
            index=models.Index(fields=["nct_id"], name="papers_clin_nct_id_2a468a_idx"),
        ),
        migrations.AddIndex(
            model_name="clinicaltrial",
            index=models.Index(
                fields=["overall_status"], name="papers_clin_overall_fd35af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="clinicaltrial",
            index=models.Index(
                fields=["oral_health_category"], name="papers_clin_oral_he_0e098f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="clinicaltrial",
            index=models.Index(
                fields=["start_date"], name="papers_clin_start_d_84959c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="clinicaltrial",
            index=models.Index(
                fields=["study_type"], name="papers_clin_study_t_688889_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="clinicaltrial",
            index=models.Index(
                fields=["study_phase"], name="papers_clin_study_p_8ea35e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citingwork",
            index=models.Index(
                fields=["openalex_id"], name="papers_citi_openale_6296a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citingwork",
            index=models.Index(fields=["pmid"], name="papers_citi_pmid_0b51fd_idx"),
        ),
        migrations.AddIndex(
            model_name="citingwork",
            index=models.Index(
                fields=["publication_year"], name="papers_citi_publica_005fc5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citingwork",
            index=models.Index(
                fields=["is_oral_health_related"], name="papers_citi_is_oral_a88a4f_idx"
            ),
        ),
        migrations.AddField(
            model_name="citationdata",
            name="citing_works",
            field=models.ManyToManyField(
                related_name="cited_retracted_papers",
                through="papers.Citation",
                to="papers.citingwork",
            ),
        ),
        migrations.AddField(
            model_name="citationdata",
            name="retracted_paper",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="citation_data",
                to="papers.retractedpaper",
            ),
        ),
        migrations.AddIndex(
            model_name="citationanalysisrun",
            index=models.Index(
                fields=["started_at"], name="papers_cita_started_544d9c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citationanalysisrun",
            index=models.Index(fields=["status"], name="papers_cita_status_bb39ee_idx"),
        ),
        migrations.AddIndex(
            model_name="citationanalysisrun",
            index=models.Index(
                fields=["analysis_type"], name="papers_cita_analysi_f5be3b_idx"
            ),
        ),
        migrations.AddField(
            model_name="citation",
            name="citation_data",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="papers.citationdata"
            ),
        ),
        migrations.AddField(
            model_name="citation",
            name="citing_work",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="papers.citingwork"
            ),
        ),
        migrations.AddField(
            model_name="authorpaper",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="papers.author"
            ),
        ),
        migrations.AddField(
            model_name="authorpaper",
            name="paper",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="papers.paper"
            ),
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(
                fields=["last_name", "first_name"],
                name="papers_auth_last_na_a2885f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(fields=["orcid"], name="papers_auth_orcid_f3b053_idx"),
        ),
        migrations.AddIndex(
            model_name="userprofile",
            index=models.Index(fields=["user"], name="papers_user_user_id_e046ee_idx"),
        ),
        migrations.AddIndex(
            model_name="userprofile",
            index=models.Index(fields=["orcid"], name="papers_user_orcid_ad4947_idx"),
        ),
        migrations.AddIndex(
            model_name="shareddataset",
            index=models.Index(
                fields=["dataset_id"], name="papers_shar_dataset_3dcd4c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="shareddataset",
            index=models.Index(fields=["doi"], name="papers_shar_doi_edbfbc_idx"),
        ),
        migrations.AddIndex(
            model_name="shareddataset",
            index=models.Index(
                fields=["oral_health_category"], name="papers_shar_oral_he_2a4461_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="shareddataset",
            index=models.Index(
                fields=["data_type"], name="papers_shar_data_ty_469e53_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="shareddataset",
            index=models.Index(
                fields=["access_status"], name="papers_shar_access__a886b8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="shareddataset",
            index=models.Index(
                fields=["publication_date"], name="papers_shar_publica_d0918f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="shareddataset",
            unique_together={("dataset_id", "repository")},
        ),
        migrations.AddIndex(
            model_name="picoextraction",
            index=models.Index(fields=["paper"], name="papers_pico_paper_i_1d0c45_idx"),
        ),
        migrations.AddIndex(
            model_name="picoextraction",
            index=models.Index(
                fields=["llm_provider"], name="papers_pico_llm_pro_829eec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="picoextraction",
            index=models.Index(
                fields=["is_manually_verified"], name="papers_pico_is_manu_b894d1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="picoextraction",
            index=models.Index(
                fields=["extracted_at"], name="papers_pico_extract_57c3b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paperclinicaltrial",
            index=models.Index(
                fields=["relationship_type"], name="papers_pape_relatio_807c5a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paperclinicaltrial",
            index=models.Index(
                fields=["extraction_method"], name="papers_pape_extract_b139d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paperclinicaltrial",
            index=models.Index(
                fields=["is_preregistered"], name="papers_pape_is_prer_327891_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paperclinicaltrial",
            index=models.Index(
                fields=["reports_primary_outcome"],
                name="papers_pape_reports_919db7_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="paperclinicaltrial",
            unique_together={("paper", "clinical_trial")},
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(fields=["pmid"], name="papers_pape_pmid_74e5be_idx"),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(fields=["doi"], name="papers_pape_doi_905538_idx"),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(
                fields=["publication_date"], name="papers_pape_publica_1c177f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(
                fields=["publication_year"], name="papers_pape_publica_117816_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(
                fields=["is_processed"], name="papers_pape_is_proc_97cb75_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(
                fields=["journal"], name="papers_pape_journal_22d6a0_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="paper",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("doi__isnull", False), models.Q(("doi", ""), _negated=True)
                ),
                fields=("doi",),
                name="unique_doi_when_present",
            ),
        ),
        migrations.AddIndex(
            model_name="datasetpaperlink",
            index=models.Index(
                fields=["link_type"], name="papers_data_link_ty_43f584_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetpaperlink",
            index=models.Index(
                fields=["confidence_score"], name="papers_data_confide_d36abf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetpaperlink",
            index=models.Index(
                fields=["is_verified"], name="papers_data_is_veri_ca3bd4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="datasetpaperlink",
            unique_together={("paper", "dataset")},
        ),
        migrations.AddIndex(
            model_name="datasetauthorshiporder",
            index=models.Index(
                fields=["dataset", "author_order"],
                name="papers_data_dataset_a1b227_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="datasetauthorshiporder",
            unique_together={("dataset", "author")},
        ),
        migrations.AddIndex(
            model_name="citationdata",
            index=models.Index(
                fields=["total_citations"], name="papers_cita_total_c_432dfd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citationdata",
            index=models.Index(
                fields=["post_retraction_citations"],
                name="papers_cita_post_re_33889a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="citationdata",
            index=models.Index(
                fields=["problematic_score"], name="papers_cita_problem_e5aca7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citationdata",
            index=models.Index(
                fields=["has_recent_citations"], name="papers_cita_has_rec_d7f8ef_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citation",
            index=models.Index(
                fields=["citation_date"], name="papers_cita_citatio_f192e3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citation",
            index=models.Index(
                fields=["is_post_retraction"], name="papers_cita_is_post_07e6e7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citation",
            index=models.Index(
                fields=["mentions_retraction"], name="papers_cita_mention_43d29f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="citation",
            unique_together={("citation_data", "citing_work")},
        ),
        migrations.AddIndex(
            model_name="authorpaper",
            index=models.Index(
                fields=["paper", "author_order"], name="papers_auth_paper_i_eab4c8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authorpaper",
            index=models.Index(
                fields=["is_corresponding"], name="papers_auth_is_corr_35a5c8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="authorpaper",
            index=models.Index(
                fields=["is_first_author"], name="papers_auth_is_firs_51bef4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="authorpaper",
            unique_together={("author", "paper")},
        ),
    ]
